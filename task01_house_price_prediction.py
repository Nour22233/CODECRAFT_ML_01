# -*- coding: utf-8 -*-
"""task01_house_price_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15XvyQrmPFHJ5LPOk2Jqtyn89-Wdx5Y69
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

df= pd.read_csv('train.csv')

df.head()

list(set(df.dtypes.tolist()))

print(df.columns.tolist())

df.info()

print(df.isnull().sum())

df['LotFrontage'] = df.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.fillna(x.mean()))

df.describe()

corr = df[['GrLivArea', 'BedroomAbvGr', 'FullBath', 'SalePrice']].corr()
plt.figure(figsize=(8,6))
sns.heatmap(corr, annot=True, cmap='coolwarm')
plt.title("Correlation Heatmap")
plt.show()

sns.histplot(df['SalePrice'], kde=True)
plt.title('SalePrice Distribution')
plt.show()

df_num = df.select_dtypes(include=['int64', 'float64'])
corr = df_num.corr()
top_corr = corr['SalePrice'].abs().sort_values(ascending=False)
print(top_corr.head(10))

print(df['SalePrice'].describe())
plt.figure(figsize=(9, 8))
sns.distplot(df['SalePrice'], color='g', bins=100, hist_kws={'alpha': 0.4});

plt.scatter(df['GrLivArea'], df['SalePrice'])
plt.xlabel('GrLivArea')
plt.ylabel('SalePrice')
plt.title('GrLivArea vs SalePrice')
plt.show()

plt.scatter(df['BedroomAbvGr'], df['SalePrice'])
plt.xlabel('BedroomAbvGr')
plt.ylabel('SalePrice')
plt.title('BedroomAbvGr vs SalePrice')
plt.show()

plt.scatter(df['FullBath'], df['SalePrice'])
plt.xlabel('FullBath')
plt.ylabel('SalePrice')
plt.title('FullBath vs SalePrice')
plt.show()

X = df[['GrLivArea', 'BedroomAbvGr', 'FullBath']]

y = df['SalePrice']

X.fillna(X.mean(), inplace=True)

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

model = LinearRegression()

model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print("\nModel Evaluation Metrics:")
print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"Root Mean Squared Error (RMSE): {rmse:.2f}")
print(f"R-squared (RÂ²): {r2:.2f}")

plt.figure(figsize=(10, 6))
sns.scatterplot(x=y_test, y=y_pred, alpha=0.6)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=2)
plt.xlabel('Actual Prices ($)')
plt.ylabel('Predicted Prices ($)')
plt.title('Actual vs Predicted House Prices')
plt.grid(True)
plt.show()

residuals = y_test - y_pred
plt.figure(figsize=(10, 6))
sns.scatterplot(x=y_pred, y=residuals, alpha=0.6)
plt.axhline(y=0, color='r', linestyle='--')
plt.xlabel('Predicted Prices ($)')
plt.ylabel('Residuals ($)')
plt.title('Residual Plot (Errors)')
plt.grid(True)
plt.show()

plt.figure(figsize=(10, 6))
sns.histplot(y, bins=50, kde=True, color='skyblue')
plt.title('Distribution of House Prices')
plt.xlabel('Price ($)')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

def predict_price(sqft, bedrooms, bathrooms):
    new_house = [[sqft, bedrooms, bathrooms]]
    new_house_scaled = scaler.transform(new_house)
    price = model.predict(new_house_scaled)
    return price[0]

example_house = np.array([[2000, 3, 2]])
predicted_price = model.predict(example_house)
print("Predicted price for the house is:", predicted_price[0])

